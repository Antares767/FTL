#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–π –∑–∞–¥–∞—á –±–µ–∑ —Ä–µ—à–µ–Ω–∏–π
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ md_src –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ –ø–∞–ø–∫–µ tasks_only
"""

import os
import re

def process_file(input_path, output_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª, —É–¥–∞–ª—è—è —Å–µ–∫—Ü–∏—é —Å —Ä–µ—à–µ–Ω–∏–µ–º"""
    
    with open(input_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ—à–µ–Ω–∏–µ–º
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–∏ "## ‚úÖ –†–µ—à–µ–Ω–∏–µ" –∏ –≤—Å–µ–≥–æ —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ—ë
    solution_pattern = r'---\s*\n\s*## ‚úÖ –†–µ—à–µ–Ω–∏–µ.*$'
    
    # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ—à–µ–Ω–∏–µ–º
    processed_content = re.sub(solution_pattern, '', content, flags=re.DOTALL | re.MULTILINE)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    processed_content = processed_content.rstrip() + '\n'
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(processed_content)
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {os.path.basename(input_path)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
    source_dir = "md_src"
    target_dir = "tasks_only"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if not os.path.exists(source_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {target_dir}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .md —Ñ–∞–π–ª–æ–≤
    md_files = [f for f in os.listdir(source_dir) if f.endswith('.md')]
    
    if not md_files:
        print(f"‚ùå –í –ø–∞–ø–∫–µ {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .md —Ñ–∞–π–ª–æ–≤!")
        return
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(md_files)} —Ñ–∞–π–ª–æ–≤...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for md_file in sorted(md_files):
        input_path = os.path.join(source_dir, md_file)
        output_path = os.path.join(target_dir, md_file)
        
        try:
            process_file(input_path, output_path)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {md_file}: {e}")
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {target_dir}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(md_files)}")

if __name__ == "__main__":
    main()
